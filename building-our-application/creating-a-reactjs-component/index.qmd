---
title: "Creating a ReactJS Component"
---

Based on "Create and Publish packages to npm - React Component Library using tsdx" at https://www.youtube.com/watch?v=aVFasPXkyRE

In your terminal create a new ReactJS Component (here: **foo-component**):

``` {.sh}
$ npx tsdx create foo-component
```

If the following error occurs:

``` {.sh}
Cannot read property 'pickAlgorithm' of null
```

Simply run:

``` {.sh}
$ npm cache clear --force
```

If you get prompted as follows:

``` {.sh}
Need to install the following packages:
  tsdx@0.14.1
Ok to proceed? (y)
```

Agree by choosing: *y* for yes

Next, when being given the choice below:

``` {.sh}
? Choose a template ... 
  basic
  react
> react-with-storybook  
```

We choose **react-with-storybook** this time, so we can develop our ReactJS application making use of Storybook. Hence, move the sideways caret (```>```) in front of **react-with-storybook** and confirm your choice by hitting the Enter key.

``` {.sh}
√ Choose a template · react-with-storybook
? Who is the package author? »  
```

As the package owner state the unique fully-qualified domain-name (here: **vanheemstrasystems.com**) to which the new to be created component belongs.

``` {.sh}
√ Who is the package author? · vanheemstrasystems.com
√ Created foo-component
√ Installed dependencies

  Awesome! You're now ready to start coding.

  I already ran yarn install for you, so your next steps are:
    cd foo-component

  To start developing (rebuilds on changes):
    yarn start

  To build for production:
    yarn build

  To test your library with Jest:
    yarn test

  Questions? Feedback? Please let me know!
  https://github.com/formium/tsdx/issues
```

Now we have created the skeleton of the new ReactJS component, called **foo-component**!

Enter the newly created directory **foo-component** like:

```
$ cd foo-component
```

Open Visual Studio Code from within this directory:

``` {.sh}
$ code .
```

The first change we are going to make is in package.json. Change the name of the package from an unscoped name (here: **foo-component**) to a scoped package (here: **@vanheemstrasystems/foo-component**). This is to guarantee the name of this component won't be colliding with a component that has been created by some other creator on the npm registry.

``` {.sh}
...
"name": "@vanheemstrasystems/foo-component"
...
```
package.json

Next, we have to run the ```npm install``` command once, to create a ```package-lock.json``` file, which our workflow action later on will be expecting to exist.

```
$ npm install
```

Now move to the next section "creating a github repository", see you there!
