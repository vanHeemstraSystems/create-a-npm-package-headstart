---
title: "Installing Commitizen"
---

Based on "Create and Publish packages to npm - React Component Library using tsdx" at https://www.youtube.com/watch?v=aVFasPXkyRE

Install commitizen as follows in the same directory as where package.json is kept:

``` {.sh}
$ npm install commitizen --save-dev --save-exact
```

The above will add a development dependency in your package.json, like:

``` {.json}
...
  "devDependencies": {
    ...
    "commitizen": "4.2.5",
    ...
  }
...

```
package.json

Create a new file called ".czrc" at the same directory as where package.json is kept, with the following content:

``` {.json}
{
  "path": "cz-conventional-changelog"
}
```
.czrc

This just tells Commitizen which adapter we actually want our contributors to use when they try to commit to this repo.

For *husky* users, which we are, add the following configuration to the project's package.json file:

``` {.json}
"husky": {
  "hooks": {
    "pre-commit": "tsdx lint",
    "prepare-commit-msg": "exec < /dev/tty && npx cz --hook || true"
  }
}
```

Why exec < /dev/tty? By default, git hooks are not interactive. This command allows the user to use their terminal to interact with Commitizen during the hook.

Optionally: Add the following script entry to package.json:

``` {.sh}
...
 "scripts": {
   ...
   "commit": "git-cz",
   ...
 }
...
```
package.json

You can now run the following command after having made a change to your code that needs to be committed:

``` {.sh}
$ npm run commit
```

Also try if you run locally the following command:

``` {.sh}
$ git commit
```

You will get an interactive prompt where you can select the type of change that you're committing:

``` {.txt}
fix: A bug fix
docs: Documentation only changes
style: Changes that do not affect the meaning of the code (white-space, formatting, missing se..)
refactor: A code change that neither fixes a bug nor adds a feature
perf: A code change that improves performance
test: Adding missing tests or correcting existing tests
build: Changes that affect the build system or external dependencies (example scopes: gulp, br..)
(Move up and down to reveal more choices)
```

Add the "Commitizen friendly" badge to the top of your README.md file using the following markdown:

``` {.json}
[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)
```

Let's go to the next section: "Setting Up Semantic Release".
