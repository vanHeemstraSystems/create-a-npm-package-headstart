[
  {
    "objectID": "conclusion/index.html",
    "href": "conclusion/index.html",
    "title": "Conclusion",
    "section": "",
    "text": "Conclusion of this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Create an NPM Package",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "requirements/index.html",
    "href": "requirements/index.html",
    "title": "Requirements",
    "section": "",
    "text": "Requirements of the application of this site"
  },
  {
    "objectID": "building-our-application/publishing-a-reactjs-component/index.html",
    "href": "building-our-application/publishing-a-reactjs-component/index.html",
    "title": "Publishing a ReactJS Component",
    "section": "",
    "text": "Based on “Fully Automated npm publish using GitHub Actions and Semantic Release” at https://www.youtube.com/watch?v=QZdY4XYbqLI\nMore …"
  },
  {
    "objectID": "building-our-application/index.html",
    "href": "building-our-application/index.html",
    "title": "Building Our Application",
    "section": "",
    "text": "Creating a ReactJS Component\nCreating a GitHub Repository\nCreating a GitHub Action\nPublishing a ReactJS Component as a Package to Node Package Manager (NPM) Registry"
  },
  {
    "objectID": "building-our-application/creating-a-github-repository/index.html",
    "href": "building-our-application/creating-a-github-repository/index.html",
    "title": "Creating a GitHub Repository",
    "section": "",
    "text": "Based on “Fully Automated npm publish using GitHub Actions and Semantic Release” at https://www.youtube.com/watch?v=QZdY4XYbqLI\nPreviously we have created a new ReactJS component called foo-component.\nThe .github directory was also created.\nNow we’ll make sure we have a repository on GitHub (for convenience, but not mandatorily, named the same: foo-component).\nWe do not have to created a README.md or LICENSE file as these have already been created when creating the ReactJS component.\nNow inside the new directory in Visual Studio Code, remove the .github directory with all content.\n$ rm -R .github\nNext, run this command:\n$ git init\nThe above command will initialize a new .github directory for you.\nIf you are prompted that the initial branch is called master, we decide to rename it now to a more politically correct name as main:\n$ git branch -m main\nContinue by adding all files and directories to git by typing:\n$ git add .\nAnd finally, run:\n$ git commit -m \"first commit\"\n$ git branch -M main\n$ git remote add origin git@github.com:vanHeemstraSystems/foo-component.git\n$ git push -u origin main\nUpon inspection, you should now see all files and directories that were created as part of the ReactJS component to be in the GitHub repository at https://github.com/vanHeemstraSystems/foo-component"
  },
  {
    "objectID": "building-our-application/creating-a-reactjs-component/index.html",
    "href": "building-our-application/creating-a-reactjs-component/index.html",
    "title": "Creating a ReactJS Component",
    "section": "",
    "text": "Based on “Create and Publish packages to npm - React Component Library using tsdx” at https://www.youtube.com/watch?v=aVFasPXkyRE\nIn your terminal create a new ReactJS Component (here: foo-component):\n$ npx tsdx create foo-component\nIf the following error occurs:\nCannot read property 'pickAlgorithm' of null\nSimply run:\n$ npm cache clear --force\nIf you get prompted as follows:\nNeed to install the following packages:\n  tsdx@0.14.1\nOk to proceed? (y)\nAgree by choosing: y for yes\nNext, when being given the choice below:\n? Choose a template ... \n  basic\n  react\n> react-with-storybook  \nWe choose react-with-storybook this time, so we can develop our ReactJS application making use of Storybook. Hence, move the sideways caret (>) in front of react-with-storybook and confirm your choice by hitting the Enter key.\n√ Choose a template · react-with-storybook\n? Who is the package author? »  \nAs the package owner state the unique fully-qualified domain-name (here: vanheemstrasystems.com) to which the new to be created component belongs.\n√ Who is the package author? · vanheemstrasystems.com\n√ Created foo-component\n√ Installed dependencies\n\n  Awesome! You're now ready to start coding.\n\n  I already ran yarn install for you, so your next steps are:\n    cd foo-component\n\n  To start developing (rebuilds on changes):\n    yarn start\n\n  To build for production:\n    yarn build\n\n  To test your library with Jest:\n    yarn test\n\n  Questions? Feedback? Please let me know!\n  https://github.com/formium/tsdx/issues\n/* Test markup:\nvar foo;\nvar bar;\n*/\nNow we have created the skeleton of the new ReactJS component, called foo-component!\nEnter the newly created directory foo-component like:\n$ cd foo-component\nOpen Visual Studio Code from within this directory:\n$ code .\nThe first change we are going to make is in package.json. Change the name of the package from an unscoped name (here: foo-component) to a scoped package (here: @vanheemstrasystems/foo-component). This is to guarantee the name of this component won’t be colliding with a component that has been created by some other creator on the npm registry.\n...\n\"name\": \"@vanheemstrasystems/foo-component\"\n...\npackage.json"
  },
  {
    "objectID": "building-our-application/creating-a-github-action/index.html",
    "href": "building-our-application/creating-a-github-action/index.html",
    "title": "Creating a GitHub Action",
    "section": "",
    "text": "Based on “Fully Automated npm publish using GitHub Actions and Semantic Release” at https://www.youtube.com/watch?v=QZdY4XYbqLI"
  },
  {
    "objectID": "introduction/index.html",
    "href": "introduction/index.html",
    "title": "Introduction",
    "section": "",
    "text": "Fully automated release!!! semantic-release automates the whole package release workflow including: determining the next version number, generating the release notes and publishing the package.\nThis removes the immediate connection between human emotions and version numbers, strictly following the Semantic Versioning specification.\nsemantic-release is meant to be executed on the CI environment after every successful build on the release branch. This way no human is directly involved in the release process and the releases are guaranteed to be unromantic and unsentimental.\nGitHub Actions makes it easy to automate all your software workflows, now with world-class CI/CD. Build, test, and deploy your code right from GitHub.\nHere we’ll show how we can publish our packages automatically to npm every time someone does a git commit into our main branch. For that we are going to use github actions and semantic release. If you have never heard about semantic release, it will look into all the commit messages we did since the last time we publish to npm, try to understand from all those messages what is the next version that we should publish and then go ahead and do the publish for us so that process becomes completely automated by having github actions and semantic release."
  },
  {
    "objectID": "SUMMARY.html",
    "href": "SUMMARY.html",
    "title": "Create an NPM Package",
    "section": "",
    "text": "Table of contents\n\nCreate an NPM Package"
  }
]